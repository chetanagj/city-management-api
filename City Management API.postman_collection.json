{
	"info": {
		"_postman_id": "3b3e16cb-aba4-44bd-835b-7e9b1a16eb70",
		"name": "City Management API",
		"description": "### **City Management API**\n\nThe City Management API allows you to manage a collection of cities. The API provides various functionalities such as adding new cities, retrieving city details, updating city information, and deleting cities. You can also filter, search, and paginate through cities using different query parameters.\n\n---\n\n### **Base URL**\n\n`http://localhost:5000/api/cities` (or replace with your deployed server URL)\n\n---\n\n### **Available Endpoints**\n\n1. **POST /api/addCity**\n    \n    - **Description**: Add a new city to the collection.\n        \n    - { \"name\": \"City Name\", \"population\": \"Population number\", \"country\": \"Country name\", \"latitude\": \"Latitude\", \"longitude\": \"Longitude\"}\n        \n    - { \"message\": \"City added successfully\", \"city\": {city details}}\n        \n    - { \"message\": \"All fields are required\"}\n        \n2. **GET /api/cities**\n    \n    - **Description**: Retrieve all cities with options for pagination, filtering, and sorting.\n        \n    - **Query Parameters**:\n        \n        - `page`: Page number for pagination (default: 1)\n            \n        - `limit`: Number of cities per page (default: 10)\n            \n        - `filter`: Filter cities by a field (e.g., `country=India`)\n            \n        - `sort`: Sort cities by a field (e.g., `population=desc`)\n            \n        - `search`: Search for cities by name\n            \n        - `projection`: Specify which fields to include or exclude (e.g., `name, population`)\n            \n    - { \"page\": 1, \"limit\": 10, \"total\": 4, \"cities\": \\[{city objects}\\]}\n        \n3. **GET /api/cities/:id**\n    \n    - **Description**: Retrieve a city by its unique ID.\n        \n    - { \"_id\": \"city_id\", \"name\": \"City Name\", \"population\": \"Population number\", \"country\": \"Country name\", \"latitude\": \"Latitude\", \"longitude\": \"Longitude\"}\n        \n4. **PUT /api/cities/updateCity/:id**\n    \n    - **Description**: Update an existing city by ID.\n        \n    - { \"name\": \"Updated City Name\", \"population\": \"Updated Population\", \"country\": \"Updated Country\", \"latitude\": \"Updated Latitude\", \"longitude\": \"Updated Longitude\"}\n        \n    - { \"message\": \"City updated successfully\", \"city\": {updated city details}}\n        \n5. **DELETE /api/cities/deleteCity/:id**\n    \n    - **Description**: Delete a city by its ID.\n        \n    - { \"message\": \"City deleted successfully\"}\n        \n\n---\n\n### **Notes**\n\n- All endpoints expect data in JSON format.\n    \n- Ensure that required fields are included in the request body to avoid errors.\n    \n- The **GET** request for `/api/cities` supports pagination, sorting, filtering, and searching for efficient data retrieval.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24640359",
		"_collection_link": "https://www.postman.com/aviation-participant-47565051/workspace/my-workspace/collection/24640359-3b3e16cb-aba4-44bd-835b-7e9b1a16eb70?action=share&source=collection_link&creator=24640359"
	},
	"item": [
		{
			"name": "Get Cities",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/cities",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"cities"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get Cities with Parameters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/cities?filter={\"country\":\"India\"}&search=Bangalore&fields=name,population",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"cities"
					],
					"query": [
						{
							"key": "filter",
							"value": "{\"country\":\"India\"}"
						},
						{
							"key": "search",
							"value": "Bangalore"
						},
						{
							"key": "fields",
							"value": "name,population"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Limit cities",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/cities?page=2&limit=5&sort=name",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"cities"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "sort",
							"value": "name"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Add Cities",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Chicago\",\n  \"population\": 790000,\n  \"country\": \"USA\",\n  \"latitude\": 12.9716,\n  \"longitude\": 89.5946\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/addCity",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"addCity"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update Cities by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"population\": 9200000\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/updateCity/67a059397ed8e02810fc244d",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"updateCity",
						"67a059397ed8e02810fc244d"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete Cities by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/deleteCity/67a067806e303a0c7761be64",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"deleteCity",
						"67a067806e303a0c7761be64"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}